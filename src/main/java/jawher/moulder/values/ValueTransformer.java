package jawher.moulder.values;

import jawher.moulder.ElementAndData;
import jawher.moulder.Value;

/**
 * A <code>Value</code> that transforms the values generated by another delegate
 * <code>Value</code>
 * 
 * @author jawher
 * 
 * @param <T>
 *            the resulting value's type
 * @param <S>
 *            the delegate <code>Value</code> value's type
 */
public abstract class ValueTransformer<T, S> implements Value<T> {
	private Value<S> delegate;

	public ValueTransformer(Value<S> delegate) {
		this.delegate = delegate;
	}

	/**
	 * Transforms the delegate's <code>Value</code> generated value
	 * 
	 * @param the
	 *            delegate's <code>Value</code> generated value
	 * @return
	 */
	protected abstract T transform(S s);

	/**
	 * @return the transformed value
	 */
	public T get() {
		return transform(delegate.get());
	}

	/**
	 * simply calls bind on the delagate value
	 */
	public void bind(ElementAndData nd) {
		delegate.bind(nd);
	}

}
